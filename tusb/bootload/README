/*
 * TUSB2136/3210 bootloader and i2c ROM routines
 * See http://www-s.ti.com/sc/psheets/sllu025a/sllu025a.pdf
 * and http://tusb3210.sourceforge.net/
 * 
 * Copyright (C) 2001 Jim Paris <jim@jtan.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of version 2 of the GNU General Public
 * License, as published by the Free Software Foundation.  This
 * program is distributed WITHOUT ANY WARRANTY; without even the
 * implied warranty of merchantability or fitness for a particular
 * purpose.  You should have received a copy of version 2 of the GNU
 * General Public License along with this program; if not, write to
 * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

This is bootload version 1.4.  It contains three utilities, bootload,
i2c-rom, and i2c-header.  Run them with no arguments to get usage
instructions.

bootload
--------
Interacts with the built-in boot code found on the TUSB2136 and
TUSB3210 chips; use this to download firmware to the chip and execute it

i2c-rom
-------
Also interacts with the TUSB2136/3210.  Use this to read from or write
to the external EEPROM.  Note that if you have a 5V EEPROM being
driven at 3.3V (like me), you'll need to add a delay between each byte
to give the high voltage generator circuitry time to recharge.  The
default delay is set to 5 ms and can be lowered (or set to zero) via
the command line.

i2c-header
----------
Use this to generate an image suitable for writing to the i2c EEPROM.
It adds the necessary headers with information supplied on the command
line.  It can add

1) just the USB Basic Info, which will give the TUSB your own
   VID/PID but still execute the builtin bootcode
2) just the firmware, which can manually set up the USB
3) both, in which case the USB info gets automatically filled
   (but the firmware still needs to manually connect to the bus)

#1 is good if you want to always download firmware from the host; you
can use a 16-byte EEPROM to supply a new VID/PID to uniquely identify
it so the proper drivers can pick it up.

#2 is good if the firmware needs to figure out any USB parameters
at runtime (based on hardware configuration, etc)

#3 is good for all other cases. 

Again, run the program with no arguments to get usage instructions.


Building and using
------------------
Bootload and i2c-rom are purely user-space, relying on libusb and
usbdevfs to provide USB functionality.  They require:

- usb support in the kernel (CONFIG_USB)
- usbdevfs support in the kernel (CONFIG_USB_DEVICEFS)
- /proc filesystem support in the kernel (CONFIG_PROC_FS)
- a mounted proc filesystem (mount -t proc proc /proc)
- a mounted usbdevfs filesystem (mount -t usbdevfs usbdevfs /proc/bus/usb)
- libusb 0.1.4 installed (http://download.sf.net/libusb/libusb-0.1.4.tar.gz)

To build, make sure libusb-config is in your path and run 'make'.

You don't need to be root to use these utilities.  Make sure you have
write permission to the USB device under /proc/bus/usb.  The usb_perms
daemon (available at http://www.xena.uklinux.net/Linux/usb_perms.html)
can help with this.

-jim
